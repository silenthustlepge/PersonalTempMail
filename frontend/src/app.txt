// App.js
import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import axios from 'axios';
axios.defaults.headers.common['ngrok-skip-browser-warning'] = 'true';
const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'https://primary-lemming-noble.ngrok-free.app';
const API = `${BACKEND_URL}/api`;

function App() {
    // --- State ---
    const [currentAddress, setCurrentAddress] = useState('');
    const [addressToCheck, setAddressToCheck] = useState('');
    const [inbox, setInbox] = useState([]);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    const [selectedEmail, setSelectedEmail] = useState(null);
    const [showWelcome, setShowWelcome] = useState(true);
    // WebSocket ref
    const wsRef = useRef(null);

    // Emergent Login Modal State
    const [showEmergentModal, setShowEmergentModal] = useState(false);
    const [emergentEmail, setEmergentEmail] = useState('');
    const [emergentName, setEmergentName] = useState('');
    const [emergentPassword, setEmergentPassword] = useState('');
    const [emergentSaveMsg, setEmergentSaveMsg] = useState('');
    // Emergent Check State
    const [showEmergentCheck, setShowEmergentCheck] = useState(false);
    const [emergentCheckEmail, setEmergentCheckEmail] = useState('');
    const [emergentCheckResult, setEmergentCheckResult] = useState(null);
    const [emergentCheckMsg, setEmergentCheckMsg] = useState('');
    const [showEmergentDetails, setShowEmergentDetails] = useState(false);

    // --- WebSocket Real-Time Updates ---
    useEffect(() => {
        if (!BACKEND_URL) return;
        let wsUrl = '';
        try {
            const url = new URL(BACKEND_URL);
            wsUrl = (url.protocol === 'https:' ? 'wss://' : 'ws://') + url.host;
        } catch {
            wsUrl = BACKEND_URL.replace(/^http/, 'ws');
        }
        const ws = new window.WebSocket(wsUrl);
        wsRef.current = ws;
        ws.onopen = () => {};
        ws.onmessage = (event) => {
            try {
                const msg = JSON.parse(event.data);
                if (msg.type === 'NEW_EMAIL' && msg.data && msg.data.address === currentAddress) {
                    setInbox(prev => [msg.data, ...prev]);
                    setSuccess('New email received!');
                }
                if (msg.type === 'NEW_EMERGENT_LOGIN') {
                    setSuccess('A new emergent login was saved.');
                }
            } catch (e) {}
        };
        ws.onerror = () => {};
        ws.onclose = () => {};
        return () => {
            ws.close();
        };
    }, [BACKEND_URL, currentAddress]);

    // --- Notification Auto-dismiss ---
    useEffect(() => {
        if (error || success) {
            const timer = setTimeout(() => {
                setError('');
                setSuccess('');
            }, 2000);
            return () => clearTimeout(timer);
        }
    }, [error, success]);

    // --- Core Logic ---
    const fetchEmails = async (address) => {
        if (!address) return;
        try {
            const response = await axios.get(`${API}/inbox/${address}`);
            setInbox(response.data);
        } catch (err) {
            setError('Failed to fetch emails.');
        }
    };

    // Remove polling logic (no startPolling, stopPolling, intervalRef, isPolling, lastUpdate)

    const resetSession = () => {
        setInbox([]);
        setSelectedEmail(null);
        setError('');
        setSuccess('');
    };

    // --- Action Handlers ---
    const handleGetNewAddress = async () => {
        setIsLoading(true);
        resetSession();
        setCurrentAddress('');
        setAddressToCheck('');
        setShowWelcome(false);
        try {
            const response = await axios.get(`${API}/new-address`);
            const newAddress = response.data.address;
            if (!newAddress) {
                setError('No address returned from backend.');
                return;
            }
            setCurrentAddress(newAddress);
            setSuccess('New address generated!');
            fetchEmails(newAddress);
        } catch (err) {
            setError(err.response?.data?.error || 'Failed to get a new address.');
        } finally {
            setIsLoading(false);
        }
    };

    const handleLoadAddress = async () => {
        if (!addressToCheck) {
            setError('Please enter an address to load.');
            return;
        }
        setIsLoading(true);
        resetSession();
        setShowWelcome(false);
        try {
            const response = await axios.post(`${API}/check-address`, { address: addressToCheck });
            if (response.data.isValid) {
                setCurrentAddress(addressToCheck);
                setSuccess('Address loaded!');
                fetchEmails(addressToCheck);
            } else {
                setError('This is not a valid address from our service.');
                setCurrentAddress('');
            }
        } catch (err) {
            setError('Failed to validate the address.');
        } finally {
            setIsLoading(false);
        }
    };

    const handleRetireAddress = async () => {
        if (!currentAddress) return;
        const confirmRetire = window.confirm(`Are you sure you want to retire ${currentAddress}? This action cannot be undone.`);
        if (!confirmRetire) return;
        resetSession();
        try {
            await axios.post(`${API}/mark-used`, { address: currentAddress });
            setSuccess('Address retired successfully.');
            setCurrentAddress('');
            if(currentAddress === addressToCheck) {
              setAddressToCheck('');
            }
        } catch (err) {
            setError('Failed to retire address.');
        }
    };

    const handleCopyToClipboard = async () => {
        if (!currentAddress) return;
        await navigator.clipboard.writeText(currentAddress);
        setSuccess('Email address copied to clipboard!');
    };

    const handleRefreshInbox = () => {
        if (currentAddress) fetchEmails(currentAddress);
    };

    // --- Helpers & Sanitization ---
    const formatDate = (dateString) => new Date(dateString).toLocaleString();
    const sanitizeHtml = (html) => html?.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '') || '';

    // --- Emergent Login Save Handler ---
    const handleOpenEmergentModal = (email = '') => {
        // Defensive: always use string, never object
        let safeEmail = email;
        if (typeof safeEmail !== 'string') {
            if (safeEmail && typeof safeEmail === 'object' && safeEmail.email) {
                safeEmail = safeEmail.email;
            } else {
                safeEmail = '';
            }
        }
        if (!safeEmail && typeof currentAddress === 'string') {
            safeEmail = currentAddress;
        }
        if (typeof safeEmail !== 'string') safeEmail = '';
        setEmergentEmail(safeEmail);
        setEmergentName('');
        setEmergentPassword('');
        setEmergentSaveMsg('');
        setShowEmergentModal(true);
        // Debug log
        if (safeEmail && typeof safeEmail !== 'string') {
            console.warn('Emergent email was not a string:', safeEmail);
        }
    };

    // --- Emergent Login Check Handler ---
    const handleOpenEmergentCheck = () => {
        setEmergentCheckEmail('');
        setEmergentCheckResult(null);
        setEmergentCheckMsg('');
        setShowEmergentCheck(true);
        setShowEmergentDetails(false);
    };

    const handleCheckEmergentEmail = async (e) => {
        e.preventDefault();
        setEmergentCheckMsg('');
        setEmergentCheckResult(null);
        setShowEmergentDetails(false);
        if (!emergentCheckEmail) {
            setEmergentCheckMsg('Please enter an email to check.');
            return;
        }
        try {
            const res = await axios.post(`${API}/check-emergent-login`, { email: emergentCheckEmail });
            if (res.data && res.data.exists) {
                setEmergentCheckResult(res.data.login);
                setEmergentCheckMsg('Details found!');
            } else {
                setEmergentCheckResult(null);
                setEmergentCheckMsg('No details available for this email. You can create one.');
            }
        } catch (err) {
            setEmergentCheckMsg('Failed to check email.');
        }
    };

    const handleSaveEmergentLogin = async (e) => {
        e.preventDefault();
        setEmergentSaveMsg('');
        if (!emergentEmail || !emergentName || !emergentPassword) {
            setEmergentSaveMsg('All fields are required.');
            return;
        }
        try {
            const res = await axios.post(`${API}/save-emergent-login`, {
                email: emergentEmail,
                name: emergentName,
                password: emergentPassword
            });
            setEmergentSaveMsg(res.data?.message || 'Saved!');
        } catch (err) {
            console.error('Emergent save error:', err, err.response);
            setEmergentSaveMsg(err.response?.data?.error || 'Failed to save.');
        }
    };

    // --- Render ---
    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-100 to-indigo-200 flex flex-col">
            {/* Welcome Section */}
            {showWelcome && (
                <div className="fixed inset-0 z-40 flex items-center justify-center bg-black bg-opacity-40">
                    <div className="bg-white rounded-xl shadow-2xl p-8 max-w-lg w-full text-center">
                        <h1 className="text-3xl font-bold mb-2 text-indigo-700">Welcome to Temp Mail Service!</h1>
                        <p className="mb-4 text-gray-700">Get a disposable email address instantly. Generate a new one or check a previous address below.</p>
                        <button onClick={() => setShowWelcome(false)} className="mt-2 px-6 py-2 bg-indigo-600 text-white rounded-lg font-semibold hover:bg-indigo-700 transition">Get Started</button>
                    </div>
                </div>
            )}
            <div className="container mx-auto px-4 py-8 flex-1">
            {/* Emergent Login Save & Check Group */}
            <div className="flex flex-wrap gap-4 justify-end mb-4">
                <button
                    className="bg-gray-800 text-white px-5 py-2 rounded-lg font-semibold shadow hover:bg-gray-900 transition"
                    onClick={handleOpenEmergentModal}
                >
                    Emergent.sh Login Save
                </button>
                <button
                    className="bg-blue-700 text-white px-5 py-2 rounded-lg font-semibold shadow hover:bg-blue-800 transition"
                    onClick={handleOpenEmergentCheck}
                >
                    Check Emergent Email
                </button>
            </div>

            {/* Emergent Login Check Modal */}
            {showEmergentCheck && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                    <div className="bg-white rounded-xl shadow-2xl p-8 max-w-md w-full relative">
                        <button
                            className="absolute top-3 right-3 text-gray-400 hover:text-gray-700 text-2xl font-bold"
                            onClick={() => setShowEmergentCheck(false)}
                            aria-label="Close"
                        >
                            &times;
                        </button>
                        <h2 className="text-xl font-bold mb-4 text-indigo-700">Check Emergent.sh Email</h2>
                        <form onSubmit={handleCheckEmergentEmail} className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                                <input
                                    type="email"
                                    className="w-full border border-gray-300 rounded px-3 py-2 font-mono text-sm focus:ring-indigo-500 focus:border-indigo-500"
                                    value={emergentCheckEmail}
                                    onChange={e => setEmergentCheckEmail(e.target.value)}
                                    placeholder="Email address"
                                    required
                                />
                            </div>
                            <button
                                type="submit"
                                className="w-full bg-blue-600 text-white py-2 rounded font-semibold hover:bg-blue-700 transition"
                            >
                                Check
                            </button>
                        </form>
                        {emergentCheckMsg && (
                            <div className={`mt-4 text-center text-sm ${emergentCheckResult ? 'text-green-600' : 'text-red-600'}`}>{emergentCheckMsg}</div>
                        )}
                        {emergentCheckResult && !showEmergentDetails && (
                            <div className="mt-4 flex flex-col items-center gap-2">
                                <button
                                    className="bg-indigo-600 text-white px-4 py-2 rounded font-semibold hover:bg-indigo-700 transition"
                                    onClick={() => setShowEmergentDetails(true)}
                                >
                                    View Details
                                </button>
                            </div>
                        )}
                        {showEmergentDetails && emergentCheckResult && (
                            <div className="mt-4 bg-gray-50 p-4 rounded text-left">
                                <div><span className="font-medium">Email:</span> {emergentCheckResult.email}</div>
                                <div><span className="font-medium">Name:</span> {emergentCheckResult.name}</div>
                                <div><span className="font-medium">Password:</span> <span className="font-mono">{emergentCheckResult.password}</span></div>
                                <div><span className="font-medium">Saved At:</span> {formatDate(emergentCheckResult.savedAt)}</div>
                            </div>
                        )}
                        {!emergentCheckResult && (
                            <div className="mt-4 flex flex-col items-center gap-2">
                                <button
                                    className="bg-gray-800 text-white px-4 py-2 rounded font-semibold hover:bg-gray-900 transition"
                                    onClick={() => {
                                        setShowEmergentCheck(false);
                                        // Only pass emergentCheckEmail if it's a string and not empty
                                        if (typeof emergentCheckEmail === 'string' && emergentCheckEmail.trim() !== '') {
                                            handleOpenEmergentModal(emergentCheckEmail);
                                        } else {
                                            handleOpenEmergentModal('');
                                        }
                                    }}
                                >
                                    Create New Login
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            )}
            {/* Emergent Login Modal */}
            {showEmergentModal && (
                <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
                    <div className="bg-white rounded-xl shadow-2xl p-8 max-w-md w-full relative">
                        <button
                            className="absolute top-3 right-3 text-gray-400 hover:text-gray-700 text-2xl font-bold"
                            onClick={() => setShowEmergentModal(false)}
                            aria-label="Close"
                        >
                            &times;
                        </button>
                        <h2 className="text-xl font-bold mb-4 text-indigo-700">Emergent.sh Login Save</h2>
                        <form onSubmit={handleSaveEmergentLogin} className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Email</label>
                                <input
                                    type="email"
                                    className="w-full border border-gray-300 rounded px-3 py-2 font-mono text-sm focus:ring-indigo-500 focus:border-indigo-500"
                                    value={emergentEmail}
                                    onChange={e => setEmergentEmail(e.target.value)}
                                    placeholder="Email address"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Name</label>
                                <input
                                    type="text"
                                    className="w-full border border-gray-300 rounded px-3 py-2 text-sm focus:ring-indigo-500 focus:border-indigo-500"
                                    value={emergentName}
                                    onChange={e => setEmergentName(e.target.value)}
                                    placeholder="Your name"
                                    required
                                />
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Password</label>
                                <input
                                    type="password"
                                    className="w-full border border-gray-300 rounded px-3 py-2 text-sm focus:ring-indigo-500 focus:border-indigo-500"
                                    value={emergentPassword}
                                    onChange={e => setEmergentPassword(e.target.value)}
                                    placeholder="Password"
                                    required
                                />
                            </div>
                            <button
                                type="submit"
                                className="w-full bg-indigo-600 text-white py-2 rounded font-semibold hover:bg-indigo-700 transition"
                            >
                                Save
                            </button>
                        </form>
                        {emergentSaveMsg && (
                            <div className={`mt-4 text-center text-sm ${emergentSaveMsg.includes('Saved') ? 'text-green-600' : 'text-red-600'}`}>{emergentSaveMsg}</div>
                        )}
                    </div>
                </div>
            )}
                {/* Header */}
                <div className="text-center mb-8">
                    <h1 className="text-4xl font-extrabold text-indigo-800 mb-2 tracking-tight drop-shadow">📧 Temp Mail Service</h1>
                    <p className="text-gray-700 text-lg">Instant, disposable email for signups, downloads, and more.</p>
                </div>

                {/* Control Panel */}
                <div className="bg-white rounded-2xl shadow-xl p-8 mb-8 flex flex-col md:flex-row gap-8">
                    {/* Generate New Address */}
                    <div className="flex-1 flex flex-col items-center gap-3">
                        <h3 className="text-lg font-semibold text-gray-800 mb-2">1. Generate New Address</h3>
                        <button onClick={handleGetNewAddress} disabled={isLoading} className="bg-green-500 text-white px-8 py-3 rounded-lg text-lg font-bold shadow hover:bg-green-600 disabled:bg-gray-300 transition-all w-full">
                            {isLoading ? '⏳ Loading...' : '🆕 Generate Email'}
                        </button>
                        <span className="text-gray-500 text-xs mt-1">Click to get a fresh, unique email address.</span>
                    </div>
                    {/* Check Previous Address */}
                    <div className="flex-1 flex flex-col items-center gap-3 border-t md:border-t-0 md:border-l border-gray-200 pt-6 md:pt-0 md:pl-8">
                        <h3 className="text-lg font-semibold text-gray-800 mb-2">2. Check Previous Address</h3>
                        <div className="flex w-full gap-2">
                            <input type="email" value={addressToCheck} onChange={e => setAddressToCheck(e.target.value)} placeholder="Paste a previous address" className="flex-1 bg-gray-50 border border-gray-300 rounded-lg px-4 py-2 font-mono text-sm focus:ring-indigo-500 focus:border-indigo-500" disabled={isLoading}/>
                            <button onClick={handleLoadAddress} disabled={!addressToCheck || isLoading} className="bg-purple-500 text-white px-6 py-2 rounded-lg font-bold hover:bg-purple-600 disabled:bg-gray-300 transition-all">📥 Load</button>
                        </div>
                        <span className="text-gray-500 text-xs mt-1">Check inbox for a previously generated address.</span>
                    </div>
                </div>

                {/* Active Session Card */}
                {currentAddress && (
                    <div className="bg-indigo-50 border border-indigo-200 rounded-xl p-6 mb-8 shadow flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                        <div className="flex-1">
                            <div className="text-xs text-indigo-700 font-semibold mb-1">Active Address</div>
                            <div className="flex items-center gap-2">
                                <span className="font-mono text-base md:text-lg bg-white border border-indigo-200 rounded px-3 py-2 text-indigo-900 select-all shadow-inner">{currentAddress}</span>
                                <button onClick={handleCopyToClipboard} className="ml-2 px-3 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 font-medium text-sm shadow">📋 Copy</button>
                            </div>
                        </div>
                        <div className="flex flex-col md:flex-row gap-2 md:gap-4 mt-4 md:mt-0 items-center">
                            <button onClick={handleRefreshInbox} className="bg-blue-500 text-white px-5 py-2 rounded-lg font-medium hover:bg-blue-600 shadow">🔄 Refresh</button>
                            <button onClick={handleRetireAddress} className="bg-red-500 text-white px-5 py-2 rounded-lg font-medium hover:bg-red-600 shadow">🚫 Retire</button>
                            <span className="flex items-center text-green-600 text-xs ml-2 mt-2 md:mt-0"><span className="animate-pulse w-2 h-2 bg-green-500 rounded-full mr-2"></span>Real-time auto-refresh enabled</span>
                        </div>
                    </div>
                )}

                {/* Feedback Toasts */}
                {(error || success) && (
                    <div className={`fixed top-6 right-6 z-50 px-6 py-4 rounded-lg shadow-lg text-white font-semibold text-base transition-all ${error ? 'bg-red-500' : 'bg-green-500'}`}
                        style={{ pointerEvents: 'none' }}>
                        {error || success}
                    </div>
                )}

                {/* Main Content Area: Inbox + Email Viewer */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    {/* Inbox List */}
                    <div className="lg:col-span-1 bg-white rounded-xl shadow-lg">
                        <div className="bg-indigo-100 px-4 py-3 border-b rounded-t-xl flex items-center gap-2">
                            <span className="text-xl">📬</span>
                            <h2 className="text-lg font-bold text-indigo-800">Inbox ({Array.from(new Map(inbox.filter(email => email.subject && email.subject !== '(no subject)').map(e => [e.id, e])).values()).length})</h2>
                        </div>
                        <div className="max-h-96 overflow-y-auto">
                            {(() => {
                                const filtered = inbox.filter(email => email.subject && email.subject !== '(no subject)');
                                const unique = Array.from(new Map(filtered.map(e => [e.id, e])).values());
                                if (unique.length === 0) {
                                    return (
                                        <div className="p-6 text-center text-gray-500 flex flex-col items-center">
                                            <div className="text-5xl mb-2">📭</div>
                                            <p className="mb-2">{currentAddress ? 'No emails yet...' : 'Generate or load an address to see its inbox'}</p>
                                            {currentAddress && <span className="text-xs text-gray-400">Try sending an email to this address!</span>}
                                        </div>
                                    );
                                }
                                return (
                                    <div className="divide-y divide-gray-200">
                                        {unique.map((email) => (
                                            <div key={email.id} onClick={() => setSelectedEmail(email)} className={`p-4 cursor-pointer hover:bg-indigo-50 transition-colors ${selectedEmail?.id === email.id ? 'bg-indigo-100 border-r-4 border-indigo-500' : ''}`}>
                                                <div className="truncate font-semibold text-indigo-900 mb-1">{email.subject}</div>
                                                <div className="truncate text-sm text-gray-700 mb-1">From: {email.from}</div>
                                                <div className="text-xs text-gray-400">{formatDate(email.date)}</div>
                                            </div>
                                        ))}
                                    </div>
                                );
                            })()}
                        </div>
                    </div>
                    {/* Email Viewer */}
                    <div className="lg:col-span-2 bg-white rounded-xl shadow-lg h-full">
                        <div className="bg-indigo-100 px-4 py-3 border-b rounded-t-xl flex items-center gap-2">
                            <span className="text-xl">📄</span>
                            <h2 className="text-lg font-bold text-indigo-800">Email Content</h2>
                        </div>
                        <div className="p-6">
                            {selectedEmail && selectedEmail.subject && selectedEmail.subject !== '(no subject)' ? (
                                <div className="space-y-4">
                                    <div className="bg-gray-50 p-4 rounded-md">
                                        <div className="grid grid-cols-1 gap-2 text-sm">
                                            <div><span className="font-medium">Subject:</span> <span className="ml-2">{selectedEmail.subject}</span></div>
                                            <div><span className="font-medium">From:</span> <span className="ml-2">{selectedEmail.from}</span></div>
                                            <div><span className="font-medium">Date:</span> <span className="ml-2">{formatDate(selectedEmail.date)}</span></div>
                                        </div>
                                    </div>
                                    <div className="border-t pt-4">
                                        <div className="prose max-w-none" dangerouslySetInnerHTML={{__html: sanitizeHtml(selectedEmail.body)}} />
                                    </div>
                                </div>
                            ) : (
                                <div className="text-center text-gray-500 py-12 flex flex-col items-center">
                                    <div className="text-5xl mb-4">📧</div>
                                    <p>Select an email from the inbox to view it</p>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>
            {/* Footer */}
            <footer className="mt-12 py-6 bg-indigo-900 text-indigo-100 text-center text-sm">
                <div>💡 Tip: Use this service for signups, downloads, or any time you need a quick, disposable email. Emails are received in real-time!</div>
                <div className="mt-2">&copy; {new Date().getFullYear()} Temp Mail Service</div>
            </footer>
        </div>
    );
}

export default App;